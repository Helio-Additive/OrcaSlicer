// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef LISTMATERIALSCLIENT_H
#define LISTMATERIALSCLIENT_H

#include "graphqlservice/GraphQLClient.h"
#include "graphqlservice/GraphQLParse.h"
#include "graphqlservice/GraphQLResponse.h"

#include "graphqlservice/internal/Version.h"

// Check if the library version is compatible with clientgen 3.7.0
static_assert(graphql::internal::MajorVersion == 3, "regenerate with clientgen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 7, "regenerate with clientgen: minor version mismatch");

#include <optional>
#include <string>
#include <vector>

/// <summary>
/// Operation: query ListMaterials
/// </summary>
/// <code class="language-graphql">
/// query ListMaterials($page: Int, $pageSize: Int, $filters: [MaterialFilter!]) {
///   materials(page: $page, pageSize: $pageSize, filters: $filters) {
///     pages
///     pageInfo {
///       hasPreviousPage
///       hasNextPage
///     }
///     objects {
///       ... on Material {
///         id
///         name
///         brand {
///           id
///           name
///         }
///       }
///     }
///   }
/// }
/// </code>
namespace graphql::client::query::ListMaterials {

// Return the original text of the request document.
const std::string& GetRequestText() noexcept;

// Return a pre-parsed, pre-validated request object.
const peg::ast& GetRequestObject() noexcept;

enum class MaterialField
{
	ID,
	NAME,
	BAMBUSTUDIO_NAME,
};

enum class SimulationStatus
{
	PENDING,
	INITIALIZING,
	SIMULATING,
	ARCHIVING,
	FINISHED,
	FAILED,
	STOPPED,
};

struct Variables
{
	struct MaterialFilter
	{
		MaterialField field {};
		Filter filter {};
	};

	struct StringFilter
	{
		std::optional<response::StringType> equalTo {};
		std::optional<response::StringType> notEqualTo {};
		std::optional<response::StringType> caseSensitiveContains {};
		std::optional<response::StringType> caseInsensitiveContains {};
		std::optional<response::StringType> caseSensitiveStartsWith {};
		std::optional<response::StringType> caseInsensitiveStartsWith {};
		std::optional<response::StringType> caseSensitiveEndsWith {};
		std::optional<response::StringType> caseInsensitiveEndsWith {};
		std::optional<response::StringType> notCaseSensitiveContains {};
		std::optional<response::StringType> notCaseInsensitiveContains {};
		std::optional<response::StringType> notCaseSensitiveStartsWith {};
		std::optional<response::StringType> notCaseInsensitiveStartsWith {};
		std::optional<response::StringType> notCaseSensitiveEndsWith {};
		std::optional<response::StringType> notCaseInsensitiveEndsWith {};
	};

	struct FloatFilter
	{
		std::optional<response::FloatType> equalTo {};
		std::optional<response::FloatType> notEqualTo {};
		std::optional<response::FloatType> greaterThan {};
		std::optional<response::FloatType> greaterThanOrEqualTo {};
		std::optional<response::FloatType> lessThan {};
		std::optional<response::FloatType> lessThanOrEqualTo {};
		std::optional<std::vector<response::FloatType>> inList {};
		std::optional<std::vector<response::FloatType>> notInList {};
	};

	struct IntFilter
	{
		std::optional<response::IntType> equalTo {};
		std::optional<response::IntType> notEqualTo {};
		std::optional<response::IntType> greaterThan {};
		std::optional<response::IntType> greaterThanOrEqualTo {};
		std::optional<response::IntType> lessThan {};
		std::optional<response::IntType> lessThanOrEqualTo {};
		std::optional<std::vector<response::IntType>> inList {};
		std::optional<std::vector<response::IntType>> notInList {};
	};

	struct BooleanFilter
	{
		std::optional<response::BooleanType> equalTo {};
		std::optional<response::BooleanType> notEqualTo {};
	};

	struct SimulationStatusFilter
	{
		std::optional<SimulationStatus> equalTo {};
		std::optional<SimulationStatus> notEqualTo {};
	};

	struct Filter
	{
		std::optional<StringFilter> stringFilter {};
		std::optional<FloatFilter> floatFilter {};
		std::optional<IntFilter> intFilter {};
		std::optional<BooleanFilter> booleanFilter {};
		std::optional<SimulationStatusFilter> statusFilter {};
	};

	response::IntType page {};
	response::IntType pageSize {};
	MaterialFilter filters {};
};

response::Value serializeVariables(Variables&& variables);

struct Response
{
	struct materials_PaginatedResponse
	{
		struct pageInfo_PageInfo
		{
			response::BooleanType hasPreviousPage {};
			response::BooleanType hasNextPage {};
		};

		struct objects_MaterialPrinterSimulationOptimizationEventGcodeFaqNewsArticle
		{
			struct brand_MaterialBrand
			{
				response::IdType id {};
				response::StringType name {};
			};

			response::IdType id {};
			response::StringType name {};
			brand_MaterialBrand brand {};
		};

		response::IntType pages {};
		pageInfo_PageInfo pageInfo {};
		std::vector<objects_MaterialPrinterSimulationOptimizationEventGcodeFaqNewsArticle> objects {};
	};

	materials_PaginatedResponse materials {};
};

Response parseResponse(response::Value&& response);

} // namespace graphql::client::query::ListMaterials

#endif // LISTMATERIALSCLIENT_H
